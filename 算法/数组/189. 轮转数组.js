// 给定一个整数数组 nums，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。

// 示例 1:
// 输入: nums = [1,2,3,4,5,6,7], k = 3
// 输出: [5,6,7,1,2,3,4]
// 解释:
// 向右轮转 1 步: [7,1,2,3,4,5,6]
// 向右轮转 2 步: [6,7,1,2,3,4,5]
// 向右轮转 3 步: [5,6,7,1,2,3,4]

// 示例 2:
// 输入：nums = [-1,-100,3,99], k = 2
// 输出：[3,99,-1,-100]
// 解释:
// 向右轮转 1 步: [99,-1,-100,3]
// 向右轮转 2 步: [3,99,-1,-100]

/**
 * 解题思路：
 * 1、计算需要走有效的步数，k可能大于数组长度，有效步数其实为 k % nums.length
 * 2、有效的分割数组，将数组分为两部分，需要轮转到前面的数组和走到后面的数组
 * 3、将两个数组拼接则得到轮转后的数组
 */
var rotate = function (nums, k) {
  let n = nums.length;

  k = k % n;

  const part1 = nums.slice(-k);

  const part2 = nums.slice(0, n - k);

  const result = part1.concat(part2);
  
  // 需要在原数组上修改做此步操作
  // for (let i = 0; i < nums.length; i++) {
  //   nums[i] = result[i];
  // };

  return result;
};
